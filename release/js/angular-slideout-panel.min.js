'use strict';

angular.module('angular-slideout-panel', []);
'use strict';

//borrowed from https://github.com/angular-ui/bootstrap/blob/master/src/modal/modal.js - $uibResolve

angular.module('angular-slideout-panel').provider('panelResolve', [function () {
  this.$get = ['$injector', '$q', function ($injector, $q) {
    return {
      resolve: function resolve(invocables) {
        var promises = [];

        angular.forEach(invocables, function (value) {
          if (angular.isFunction(value) || angular.isArray(value)) {
            promises.push($q.resolve($injector.invoke(value)));
          } else if (angular.isString(value)) {
            promises.push($q.resolve($injector.get(value)));
          } else {
            promises.push($q.resolve(value));
          }
        });

        return $q.all(promises).then(function (resolves) {
          var resolveObj = {};
          var resolveIter = 0;

          angular.forEach(invocables, function (value, key) {
            resolveObj[key] = resolves[resolveIter++];
          });

          return resolveObj;
        });
      }
    };
  }];
}]);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

angular.module('angular-slideout-panel').service('angularSlideOutPanel', ['$q', '$rootScope', '$timeout', '$http', '$compile', '$controller', 'angularSlideOutPanelStack', 'panelResolve', function ($q, $rootScope, $timeout, $http, $compile, $controller, angularSlideOutPanelStack, panelResolve) {
  var PANEL_ELEMENT_CLASSES = {
    PANEL_BG_ELEMENT: 'angular-panel-bg',
    PANEL_BG_ELEMENT_OPEN: 'angular-panel-open-',
    PANEL_DIALOG_ELEMENT: 'angular-panel-dialog',
    PANEL_CONTENT_ELEMENT: 'angular-panel-content',
    BODY_ELEMENT_PANEL_OPEN: 'panel-open'
  };

  var PANEL_CLICK_EVENTS = {
    BACKDROP_CLICK: 'backdrop click',
    ESCAPSE_KEY_PRESS: 'escape key press'
  };

  var Panel = function () {
    /**
     * @param {Object} options
     * @param {String} [options.templateUrl] - template url
     * @param {String} [options.template] - inline template HTML string
     * @param {String} [options.openOn] - direction to open ('left' or 'right')
     * @param {Object} [options.resolve] - hash of Promises to resolve before opening the panel
     * @param {String} [options.panelClass] - CSS class name(s) to add
     * @param {String|Function|Array} [options.controller]
     */
    function Panel(options) {
      var _this = this;

      _classCallCheck(this, Panel);

      if (!options) throw new Error('Panel - constructor() - options is required');

      this._deferred = $q.defer();
      this.result = this._deferred.promise;

      this.templateUrl = options.templateUrl;
      this.template = options.template;
      this.openOn = options.openOn;
      this.controller = options.controller;
      this.resolve = options.resolve;
      this.panelClass = options.panelClass;

      this._elements = _createPanelElements({
        openOn: this.openOn,
        close: this.close.bind(this),
        dismiss: this.dismiss.bind(this),
        panelClass: this.panelClass
      });

      $q.all([this._getLocals(), this._getTemplate()]).then(function (localsAndTemplate) {
        var locals = localsAndTemplate[0];
        var scope = locals.$scope;
        var template = localsAndTemplate[1];

        scope.$panelInstance = _this; //add the Panel instance to the scope so it can be closed from whatever controller the user provides

        var compiledElement = _createTemplate(scope, template);

        _this._elements.modalContentElement.append(compiledElement);

        openModalElements(_this._elements.modalBgElement);

        angularSlideOutPanelStack.add(_this);
      });
    }

    /**
     * @param {Object} controller
     * @param {Object} resolve - hash of promises to resolve
     * @return {Promise<Object>}
     * @private
     */


    _createClass(Panel, [{
      key: '_getLocals',
      value: function _getLocals() {
        var _this2 = this;

        var promises = [];
        if (this.resolve) promises.push(panelResolve.resolve(this.resolve));

        return (this.resolve ? panelResolve.resolve(this.resolve) : $q.resolve(null)).then(function (resolves) {
          var locals = {};

          var newScope = $rootScope.$new();

          locals.$scope = newScope;
          locals.$scope.$resolve = {};
          locals.$panelInstance = _this2;

          if (resolves) {
            angular.forEach(resolves, function (value, key) {
              locals[key] = value;

              locals.$scope.$resolve[key] = value;
            });
          }

          if (_this2.controller) {
            var ctrlInstantiate = $controller(_this2.controller, locals, true);

            ctrlInstantiate();
          }

          return locals;
        });
      }

      /**
       * @param {Object} controller
       * @param {Object} resolve - hash of promises to resolve
       * @return {Promise<String>}
       * @private
       */

    }, {
      key: '_getTemplate',
      value: function _getTemplate() {
        var templatePromise = this.templateUrl ? _getTemplate2(this.templateUrl) : $q.resolve({
          data: this.template
        });

        return templatePromise.then(function (template) {
          return template ? template.data : null;
        });
      }

      /**
       * @param {Object|String} result
       * @return {Promise<Object>}
       * @private
       */

    }, {
      key: 'close',
      value: function close(result) {
        closeModalElements(this._elements.modalBgElement);

        this._deferred.resolve(result);
      }

      /**
       * @param {Object|String} reason
       * @return {Promise<Object>}
       * @private
       */

    }, {
      key: 'dismiss',
      value: function dismiss(reason) {
        closeModalElements(this._elements.modalBgElement);

        this._deferred.reject(reason);
      }
    }]);

    return Panel;
  }();

  /**
   * @param {Object} [options]
   * @param {String} [options.openOn] - 'left' or 'right' - defaults to 'left'
   * @param {Function} [options.close] - close the modal and resolve the promise
   * @param {Function} [options.dismiss] - close the modal and reject the promise
   * @param {String} [options.panelClass] - panel CSS class(es)
   */


  function _createPanelElements(options) {
    options = options || {};

    var modalBgElement = getOrCreateModalBgElement(options);
    if (options.panelClass) modalBgElement.addClass(options.panelClass);

    var modalDialogElement = angular.element(document.createElement('div'));
    modalDialogElement.addClass(PANEL_ELEMENT_CLASSES.PANEL_DIALOG_ELEMENT);
    modalDialogElement.on('click', function (event) {
      event.stopPropagation(); //prevent a click on the modal from closing it
    });

    var modalContentElement = angular.element(document.createElement('div'));
    modalContentElement.addClass(PANEL_ELEMENT_CLASSES.PANEL_CONTENT_ELEMENT);

    var modalCloseAElement = angular.element(document.createElement('a'));
    modalCloseAElement.attr('href', '#');
    modalCloseAElement.addClass('tl-icon tl-icon-times');

    // modalCloseElement.append(modalCloseAElement);

    modalDialogElement.append(modalContentElement);

    modalBgElement.append(modalDialogElement);

    var bodyElement = angular.element(document.querySelector('body'));
    if (bodyElement) bodyElement.append(modalBgElement);

    return {
      modalBgElement: modalBgElement,
      modalContentElement: modalContentElement
    };
  }

  /**
   * @param {Object} [options]
   * @param {String} [options.openOn] - direction to open the panel
   */
  function getOrCreateModalBgElement(options) {
    options = options || {};

    var bodyElement = angular.element(document.querySelector('body'));

    var modalBgElement = document.querySelector('.' + PANEL_ELEMENT_CLASSES.PANEL_BG_ELEMENT);

    if (!modalBgElement) {
      modalBgElement = angular.element(document.createElement('div'));
    } else {
      modalBgElement = angular.element(modalBgElement);
    }

    modalBgElement.addClass(PANEL_ELEMENT_CLASSES.PANEL_BG_ELEMENT);
    modalBgElement.addClass(PANEL_ELEMENT_CLASSES.PANEL_BG_ELEMENT_OPEN + options.openOn);
    modalBgElement.on('click', function () {
      //close the modal on backgroup clicks
      if (options.dismiss) options.dismiss(PANEL_CLICK_EVENTS.BACKDROP_CLICK);
    });

    bodyElement.on('keydown keypress', function (event) {
      //close the modal on escape keypress
      if (event.which === 27) {
        // 27 = esc key
        event.preventDefault();

        if (options.dismiss) options.dismiss(PANEL_CLICK_EVENTS.ESCAPSE_KEY_PRESS);
      }
    });

    return modalBgElement;
  }

  function closeModalElements(modalBgElement) {
    $timeout(function () {
      angular.element(document.querySelector('body')).removeClass(PANEL_ELEMENT_CLASSES.BODY_ELEMENT_PANEL_OPEN);

      modalBgElement.removeClass('open');

      $timeout(function () {
        modalBgElement.remove();
      }, 600);
    });

    var bodyElement = angular.element(document.querySelector('body'));

    bodyElement.off('keydown keypress');

    angularSlideOutPanelStack.remove(this);
  }

  function openModalElements(modalBgElement) {
    $timeout(function () {
      angular.element(document.querySelector('body')).addClass(PANEL_ELEMENT_CLASSES.BODY_ELEMENT_PANEL_OPEN);
      modalBgElement.addClass('open');
    });
  }

  function _createTemplate(newScope, htmlString) {
    var compiledElement = $compile(htmlString)(newScope);
    return compiledElement;
  }

  function _getTemplate2(templateUrl) {
    return $http.get(templateUrl);
  }

  return {
    /**
     * @param {Object} [options]
     * @param {String} [options.templateUrl]
     * @param {String} [options.template]
     * @param {String} [options.openOn] - 'left' or 'right' - defaults to 'left'
     */
    open: function open(options) {
      if (!options) throw new Error('angularSlideOutPanel - open() - options is required');
      if (!options.templateUrl && !options.template) throw new Error('angularSlideOutPanel - open() - options.templateUrl or options.template is required');

      options.openOn = options.openOn && (options.openOn === 'right' || options.openOn === 'left') ? options.openOn : 'left';

      return new Panel(options);
    }
  };
}]);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

angular.module('angular-slideout-panel').service('angularSlideOutPanelStack', [function () {
  var AngularPanelStack = function () {
    function AngularPanelStack() {
      _classCallCheck(this, AngularPanelStack);

      this._stack = [];
    }

    _createClass(AngularPanelStack, [{
      key: 'add',
      value: function add(panel) {
        if (!panel) return;

        this._stack.push(panel);

        console.log('stack length', this._stack.length);
      }
    }, {
      key: 'remove',
      value: function remove(panel) {
        if (!panel) return;

        var index = this._stack.indexOf(panel);

        if (index >= 0) this._stack.splice(index, 1);

        console.log('stack length', this._stack.length);
      }
    }]);

    return AngularPanelStack;
  }();

  return new AngularPanelStack();
}]);